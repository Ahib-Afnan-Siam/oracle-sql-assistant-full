-- Setup script for AI Training Data Tables
-- Connect to the appropriate database/schema

-- Drop existing tables if they exist (for clean setup)
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE AI_FEEDBACK CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN IF SQLCODE != -942 THEN RAISE; END IF;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE AI_USER_PATTERNS CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN IF SQLCODE != -942 THEN RAISE; END IF;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE AI_RESPONSE_METRICS CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN IF SQLCODE != -942 THEN RAISE; END IF;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE AI_MODEL_RESPONSES CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN IF SQLCODE != -942 THEN RAISE; END IF;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE AI_HYBRID_CONTEXT CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN IF SQLCODE != -942 THEN RAISE; END IF;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE AI_SQL_SAMPLE CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN IF SQLCODE != -942 THEN RAISE; END IF;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE AI_SUMMARY_SAMPLE CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN IF SQLCODE != -942 THEN RAISE; END IF;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE AI_TURN CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN IF SQLCODE != -942 THEN RAISE; END IF;
END;
/

-- Create AI_TURN table (core table for each user interaction)
CREATE TABLE AI_TURN (
    ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    SOURCE_DB_ID VARCHAR2(50),
    CLIENT_IP VARCHAR2(45),
    USER_QUESTION CLOB,
    SCHEMA_CONTEXT_TEXT CLOB,
    SCHEMA_CONTEXT_IDS_JSON CLOB,
    META_JSON CLOB,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create AI_HYBRID_CONTEXT table (query classification context)
CREATE TABLE AI_HYBRID_CONTEXT (
    ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    TURN_ID NUMBER REFERENCES AI_TURN(ID),
    QUERY_INTENT VARCHAR2(50),
    QUERY_CONFIDENCE NUMBER(3,2),
    QUERY_COMPLEXITY NUMBER(3,2),
    ENTITIES_JSON CLOB,
    PROCESSING_STRATEGY VARCHAR2(50),
    SCHEMA_TABLES_USED CLOB,
    BUSINESS_CONTEXT CLOB,
    CLASSIFICATION_TIME_MS NUMBER,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create AI_MODEL_RESPONSES table (individual model responses)
CREATE TABLE AI_MODEL_RESPONSES (
    ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    TURN_ID NUMBER REFERENCES AI_TURN(ID),
    MODEL_TYPE VARCHAR2(10), -- 'local' or 'api'
    MODEL_NAME VARCHAR2(100),
    MODEL_PROVIDER VARCHAR2(50),
    RESPONSE_TEXT CLOB,
    RESPONSE_TIME_MS NUMBER,
    CONFIDENCE_SCORE NUMBER(3,2),
    TOKEN_COUNT NUMBER,
    PROMPT_TOKENS NUMBER,
    COMPLETION_TOKENS NUMBER,
    STATUS VARCHAR2(20), -- 'success', 'timeout', 'error', 'failed'
    ERROR_MESSAGE CLOB,
    API_COST_USD NUMBER,
    RATE_LIMIT_HIT CHAR(1) CHECK (RATE_LIMIT_HIT IN ('Y', 'N')),
    TIMEOUT_OCCURRED CHAR(1) CHECK (TIMEOUT_OCCURRED IN ('Y', 'N')),
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create AI_RESPONSE_METRICS table (quality metrics for responses)
CREATE TABLE AI_RESPONSE_METRICS (
    ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    MODEL_RESPONSE_ID NUMBER REFERENCES AI_MODEL_RESPONSES(ID),
    SQL_VALIDITY_SCORE NUMBER(3,2),
    SCHEMA_COMPLIANCE_SCORE NUMBER(3,2),
    BUSINESS_LOGIC_SCORE NUMBER(3,2),
    PERFORMANCE_SCORE NUMBER(3,2),
    OVERALL_SCORE NUMBER(3,2),
    VALIDATION_REASONING CLOB,
    EXECUTION_SUCCESS CHAR(1) CHECK (EXECUTION_SUCCESS IN ('Y', 'N')),
    EXECUTION_ERROR CLOB,
    RESULT_ROW_COUNT NUMBER,
    EXECUTION_TIME_MS NUMBER,
    SECURITY_RISK_DETECTED CHAR(1) CHECK (SECURITY_RISK_DETECTED IN ('Y', 'N')),
    ORACLE_SPECIFIC_SCORE NUMBER(3,2),
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create AI_SQL_SAMPLE table (SQL generation samples)
CREATE TABLE AI_SQL_SAMPLE (
    ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    TURN_ID NUMBER REFERENCES AI_TURN(ID),
    MODEL_NAME VARCHAR2(100),
    PROMPT_TEXT CLOB,
    SQL_TEXT CLOB,
    SQL_TEXT_FINAL CLOB,
    DISPLAY_MODE VARCHAR2(20),
    NORMALIZED_SQL CLOB,
    VALIDATION_OK CHAR(1) CHECK (VALIDATION_OK IN ('Y', 'N')),
    EXECUTION_OK CHAR(1) CHECK (EXECUTION_OK IN ('Y', 'N')),
    ERROR_CODE VARCHAR2(20),
    ROW_COUNT NUMBER,
    RESULT_TABLE_JSON CLOB,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create AI_SUMMARY_SAMPLE table (summary generation samples)
CREATE TABLE AI_SUMMARY_SAMPLE (
    ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    TURN_ID NUMBER REFERENCES AI_TURN(ID),
    MODEL_NAME VARCHAR2(100),
    PROMPT_TEXT CLOB,
    DATA_SNAPSHOT CLOB,
    SQL_USED CLOB,
    SUMMARY_TEXT CLOB,
    DISPLAY_MODE VARCHAR2(20),
    LABEL VARCHAR2(50),
    IMPROVEMENT_COMMENT CLOB,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create AI_USER_PATTERNS table (user interaction patterns)
CREATE TABLE AI_USER_PATTERNS (
    ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    TURN_ID NUMBER REFERENCES AI_TURN(ID),
    USER_SATISFACTION NUMBER(2,1), -- 1-5 scale
    RETRY_COUNT NUMBER DEFAULT 0,
    COPY_COUNT NUMBER DEFAULT 0,
    TIME_SPENT_VIEWING_MS NUMBER,
    INTERACTION_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create AI_FEEDBACK table (explicit user feedback)
CREATE TABLE AI_FEEDBACK (
    ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    TURN_ID NUMBER REFERENCES AI_TURN(ID),
    TASK_TYPE VARCHAR2(20), -- 'sql', 'summary', 'overall'
    FEEDBACK_TYPE VARCHAR2(20), -- 'good', 'wrong', 'needs_improvement'
    SQL_SAMPLE_ID NUMBER REFERENCES AI_SQL_SAMPLE(ID),
    SUMMARY_SAMPLE_ID NUMBER REFERENCES AI_SUMMARY_SAMPLE(ID),
    IMPROVEMENT_COMMENT CLOB,
    LABELER_ROLE VARCHAR2(50), -- 'end_user', 'developer', 'admin'
    META_JSON CLOB,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create indexes for better query performance
CREATE INDEX IDX_TURN_CREATED_AT ON AI_TURN(CREATED_AT);
CREATE INDEX IDX_HYBRID_TURN_ID ON AI_HYBRID_CONTEXT(TURN_ID);
CREATE INDEX IDX_MODEL_RESPONSE_TURN_ID ON AI_MODEL_RESPONSES(TURN_ID);
CREATE INDEX IDX_RESPONSE_METRICS_MODEL_ID ON AI_RESPONSE_METRICS(MODEL_RESPONSE_ID);
CREATE INDEX IDX_SQL_SAMPLE_TURN_ID ON AI_SQL_SAMPLE(TURN_ID);
CREATE INDEX IDX_SUMMARY_SAMPLE_TURN_ID ON AI_SUMMARY_SAMPLE(TURN_ID);
CREATE INDEX IDX_USER_PATTERNS_TURN_ID ON AI_USER_PATTERNS(TURN_ID);
CREATE INDEX IDX_FEEDBACK_TURN_ID ON AI_FEEDBACK(TURN_ID);

-- Verify tables were created
SELECT table_name FROM user_tables WHERE table_name LIKE 'AI_%' ORDER BY table_name;